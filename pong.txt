pong

http://www.codeskulptor.org/#user23_ja0rdSmcdn_0.py

http://www.codeskulptor.org/#user23_ja0rdSmcdn_3.py
http://www.codeskulptor.org/#user23_ja0rdSmcdn_4.py
http://www.codeskulptor.org/#user23_ja0rdSmcdn_5.py
http://www.codeskulptor.org/#user23_ja0rdSmcdn_6.py
http://www.codeskulptor.org/#user23_ja0rdSmcdn_8.py
http://www.codeskulptor.org/#user23_ja0rdSmcdn_10.py
http://www.codeskulptor.org/#user23_ja0rdSmcdn_11.py
# Implementation of classic arcade game Pong

import simplegui
import random

# initialize globals - pos and vel encode vertical info for paddles
WIDTH = 600
HEIGHT = 400       
BALL_RADIUS = 20
PAD_WIDTH = 8
PAD_HEIGHT = 80
HALF_PAD_WIDTH = PAD_WIDTH / 2
HALF_PAD_HEIGHT = PAD_HEIGHT / 2
LEFT = False
RIGHT = True
ball_pos = [WIDTH/2,HEIGHT/2]
ball_vel = [0,0]
score1 = 0
score2 = 0
paddle1_vel = 0
paddle2_vel = 0


# initialize ball_pos and ball_vel for new bal in middle of table
# if direction is RIGHT, the ball's velocity is upper right, else upper left
def spawn_ball(direction):
    global ball_pos, ball_vel # these are vectors stored as lists
    ball_pos[0] = WIDTH/2
    ball_pos[1] = HEIGHT/2
    if direction == "Right":
        ball_vel[0] = random.randrange(60, 180)/60
        ball_vel[1] = -random.randrange(120, 240)/60
    elif direction == "Left":
        ball_vel[0] = -random.randrange(60, 180)/60
        ball_vel[1] = -random.randrange(120, 240)/60

# define event handlers
def new_game():
    global paddle1_pos, paddle2_pos, paddle1_vel, paddle2_vel  # these are numbers
    global score1, score2  # these are ints
    score1 = 0
    score2 = 0
    paddle1_vel = 0
    paddle2_vel = 0
    paddle1_pos = HEIGHT/2
    paddle2_pos = HEIGHT/2
    spawn_ball(random.choice(["Left", "Right"]))
    
def reset_button():
    new_game()

def draw(c):
    global BALL_RADIUS, score1, score2, paddle1_pos, paddle2_pos, ball_pos, ball_vel, paddle1_vel, paddle2_vel
 
        
    # draw mid line and gutters
    c.draw_line([WIDTH / 2, 0],[WIDTH / 2, HEIGHT], 1, "White")
    c.draw_line([PAD_WIDTH, 0],[PAD_WIDTH, HEIGHT], 1, "White")
    c.draw_line([WIDTH - PAD_WIDTH, 0],[WIDTH - PAD_WIDTH, HEIGHT], 1, "White")
    
  
    # update ball
    ball_pos[0] += ball_vel[0]
    ball_pos[1] += ball_vel[1]
    
    #main collision checks
    if ball_pos[0] <= PAD_WIDTH+BALL_RADIUS:
        if ball_pos[1] <= paddle1_pos - HALF_PAD_HEIGHT or ball_pos[1]>= paddle1_pos + HALF_PAD_HEIGHT:
            score2 += 1
            spawn_ball("Right")
        else:
            ball_vel[0] = -ball_vel[0]*1.1
    elif ball_pos[0] >= WIDTH-BALL_RADIUS-PAD_WIDTH:
        if ball_pos[1] <=paddle2_pos - HALF_PAD_HEIGHT or ball_pos[1] >= paddle2_pos+ HALF_PAD_HEIGHT:
            score1 += 1
            spawn_ball("Left")
        else:
            ball_vel[0] = - ball_vel[0]*1.1
    #collision check for top and bottom
    if ball_pos[1] <= BALL_RADIUS:
        ball_vel[1] = -ball_vel[1]
    elif ball_pos[1] >= (HEIGHT - 1) - BALL_RADIUS:
        ball_vel[1] = -ball_vel[1]
        
    # draw ball
    c.draw_circle(ball_pos, BALL_RADIUS, 2, "White", "White")
    # update paddle's vertical position, keep paddle on the screen

    if paddle1_pos + paddle1_vel <= HALF_PAD_HEIGHT:
        paddle1_vel=0
    if paddle1_pos + paddle1_vel >= HEIGHT-HALF_PAD_HEIGHT:
        paddle1_vel=0
    if paddle2_pos + paddle2_vel <= HALF_PAD_HEIGHT:
        paddle2_vel=0
    if paddle2_pos + paddle2_vel >= HEIGHT-HALF_PAD_HEIGHT:
        paddle2_vel=0
    paddle1_pos += paddle1_vel
    paddle2_pos +=paddle2_vel
    
    # draw paddles
     
    c.draw_line([0, paddle1_pos-HALF_PAD_HEIGHT],[0, paddle1_pos+HALF_PAD_HEIGHT], 16, "White")
    c.draw_line([WIDTH - HALF_PAD_WIDTH ,paddle2_pos - HALF_PAD_HEIGHT],[WIDTH - PAD_WIDTH/2,paddle2_pos + HALF_PAD_HEIGHT],PAD_WIDTH,"White")
    # draw scores
    c.draw_text(str(score1), [WIDTH/4, 35], 30, "White")
    c.draw_text(str(score2), [.75*WIDTH, 35], 30, "White")
    
   
def keydown(key):
    global paddle1_vel, paddle2_vel
    acc = 3
    if key==simplegui.KEY_MAP["w"]:
        paddle1_vel -= acc
    elif key==simplegui.KEY_MAP["s"]:
        paddle1_vel += acc
    elif key==simplegui.KEY_MAP["down"]:
        paddle2_vel += acc
    elif key==simplegui.KEY_MAP["up"]:
        paddle2_vel -= acc
   
def keyup(key):
    global paddle1_vel, paddle2_vel
    if key==simplegui.KEY_MAP["w"]:
        paddle1_vel =0
    elif key==simplegui.KEY_MAP["s"]:
        paddle1_vel=0
    elif key==simplegui.KEY_MAP["down"]:
        paddle2_vel = 0
    elif key==simplegui.KEY_MAP["up"]:
        paddle2_vel = 0

# create frame
frame = simplegui.create_frame("Pong", WIDTH, HEIGHT)
frame.set_draw_handler(draw)
frame.set_keydown_handler(keydown)
frame.set_keyup_handler(keyup)
button1 = frame.add_button('Restart', reset_button, 100)

# start frame
new_game()
frame.start()